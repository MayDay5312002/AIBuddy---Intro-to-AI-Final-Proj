"""
Django settings for AIBuddy project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import signal
import sys
import subprocess
import docker


def start_compose(compose_file):
    subprocess.run(['docker', 'compose', '-f', compose_file, 'up', '-d'], check=True)

def stop_compose(compose_file):
    subprocess.run(['docker', 'compose', '-f', compose_file, 'down'], check=True)

def checkIfDockerRun(dockerClient):
    try:
        dockerClient = docker.from_env()
        dockerClient.version()
        print("Docker is running")
        return dockerClient
    except:
        print("Docker is not running")
        return None

def signal_handler(signum, frame): #Force cleanup
    # Cleanup code here
    stop_compose('searxng-docker\docker-compose.yaml')
    listOfContainers = settingsClient.containers.list(all=True, filters={'ancestor': 'ghcr.io/kiwix/kiwix-serve:3.7.0'})
    for container in listOfContainers:
        if container.status == 'running':
            container.stop()
            container.remove()
        elif container.status == 'exited':
            container.remove()
    print("Signal received, cleaning up")
    sys.exit(0)

settingsClient = checkIfDockerRun(None)


if(settingsClient is not None):
    signal.signal(signal.SIGINT, signal_handler)  
    signal.signal(signal.SIGTERM, signal_handler)  

    start_compose('searxng-docker\docker-compose.yaml')
    listOfContainers = settingsClient.containers.list(all=True, filters={'ancestor': 'ghcr.io/kiwix/kiwix-serve:3.7.0'})
    for container in listOfContainers:
        if container.status == 'exited':
            container.remove()




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)
os.environ["TIKA_SERVER_JAR"] = "file:///" + str(BASE_DIR).strip().replace("\\", "/") + "/tika/tika-server.jar"



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3n*9x-*uvnvn_2c_qlwjhn&shyv5qi9002&e+02*u=h%9)irs)'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

# ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:8000", "http://localhost:8000"]

#FOR NOW
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True  # Allow CSRF cookies over HTTP
# CSRF_COOKIE_SAMESITE = 'Strict'
CORS_ALLOW_ALL_ORIGINS = True ### FOR NOW

CORS_ALLOW_HEADERS = [
    "accept",
    "cache-control",
    "content-type",
    "x-requested-with",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'AIBuddy',
    'api',
    'frontend',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'AIBuddy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AIBuddy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
